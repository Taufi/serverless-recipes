service:
  name: serverless-recipe-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    RECIPES_TABLE: Recipes-${self:provider.stage}
    RECIPE_IMAGES_S3_BUCKET: serverless-recipe-images-${self:provider.stage}
    # SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Taufi Recipe API
        description: Serverless recipe application 
    models:
      - name: RecipeRequest
        contentType: application/json
        schema: ${file(models/create-recipe-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetRecipes:
    handler: src/lambda/http/getRecipes.handler
    events:
      - http:
          method: get
          path: recipes
          cors: true
          authorizer: Auth
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.RECIPE_IMAGES_S3_BUCKET}/*

  CreateRecipe:
    handler: src/lambda/http/createRecipe.handler
    events:
      - http:
          method: post
          path: recipes
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
              summary: Create a new recipe item 
              description: Create a new recipe item
              requestModels:
                'application/json': RecipeRequest
                
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  UpdateRecipe:
    handler: src/lambda/http/updateRecipe.handler
    events:
      - http:
          method: patch
          path: recipes/{recipeId}
          cors: true
          # authorizer: Auth
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  DeleteRecipe:
    handler: src/lambda/http/deleteRecipe.handler
    events:
      - http:
          method: delete
          path: recipes/{recipeId}
          cors: true
          authorizer: Auth
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}

  GenUploadUrl:
    handler: src/lambda/http/genUploadUrl.handler
    events:
      - http:
          method: post
          path: recipes/{recipeId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements: 
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPES_TABLE}
      - Effect: Allow
        Action:
         - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.RECIPE_IMAGES_S3_BUCKET}/*

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties: 
        BucketName: ${self:provider.environment.RECIPE_IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.RECIPE_IMAGES_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    RecipesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: recipeId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipeId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPES_TABLE}  